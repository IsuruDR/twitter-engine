{"version":3,"sources":["components/util/Spinner.js","components/util/Card.js","components/util/Info.js","components/search/ResultSection.js","components/search/HashTagSection.js","components/search/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Spinner","react_default","a","createElement","className","this","props","message","style","marginTop","color","React","Component","defaultProps","Card","date","screenName","Linkify_default","desc","username","src","image","Info","text","ResultSection","timeAgo","moment","startOf","fromNow","_this2","statuses","statusEntries","map","status","util_Card","createdAt","user","profilePictureUrl","name","console","log","length","isStarted","util_Info","properties","noTweetsFound","marginBottom","HashTagSection","hashTags","entry","background","padding","count","Search","state","term","isLoading","isError","onInputChange","event","_this","setState","target","value","onFormSubmit","preventDefault","axios","get","apiUrl","params","query","encodeURI","then","response","entries","data","catch","reason","onSubmit","type","onChange","placeholder","searchPlaceholder","components_search_HashTagSection","util_Spinner","backEndError","components_search_ResultSection","welcome","App","components_search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ce69ea8.chunk.js","sourcesContent":["import React from 'react';\n\nclass Spinner extends React.Component {\n\n    render() {\n        return (\n            <div className=\"ui active inverted dimmer\">\n                <div className=\"ui text loader\">{this.props.message}</div>\n                <i style={{marginTop: '100px', color: '#1DA1F2'}} className=\"large twitter icon\"></i>\n            </div>\n        );\n    }\n}\n\nSpinner.defaultProps = {\n    message: 'Loading..'\n};\n\nexport default Spinner;","import React from 'react';\nimport Linkify from 'react-linkify';\n\nclass Card extends React.Component {\n\n    render() {\n        return (\n            <div className=\"ui small card\">\n                <div className=\"content small\">\n                    <div className=\"header\"></div>\n                    <div className=\"meta\">\n                        <span className=\"right floated time\">{this.props.date}</span>\n                        <span className=\"category\">@{this.props.screenName}</span>\n                    </div>\n                    <div className=\"description\">\n                        <Linkify>\n                            <p>{this.props.desc}</p></Linkify>\n                    </div>\n                </div>\n                <div className=\"extra content\">\n                    <div className=\"right floated author\">\n                        {this.props.username}  <img className=\"ui avatar image\" src={this.props.image}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\n\nclass Info extends React.Component {\n\n    render() {\n        return (\n            <div className=\"ui grid container center aligned page grid\">\n                <div className=\"row\">\n                    <label>{this.props.text}</label>\n                </div>\n                <div className=\"row\">\n                    <i className=\"large twitter icon\" style={{color: '#1DA1F2', marginTop: '-20px'}}></i>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Info;","import './ResultSection.css';\nimport React from 'react';\nimport Card from \"../util/Card\";\nimport moment from 'moment';\nimport Info from '../util/Info';\nimport properties from '../util/properties';\n\nclass ResultSection extends React.Component {\n\n    render() {\n\n        const statuses = this.props.statusEntries.map(status => {\n            return <Card date={this.timeAgo(status.createdAt)} screenName={status.user.screenName}\n                         image={status.user.profilePictureUrl} username={status.user.name} desc={status.text}/>;\n        });\n\n        console.log(this.props.statusEntries.length > 0 && !this.props.isStarted);\n        console.log(this.props.statusEntries.length);\n        console.log(this.props.isStarted);\n\n        return (\n            <div>\n                {(this.props.statusEntries.length == 0 && this.props.isStarted) ? <Info text = {properties.noTweetsFound}/> :\n                    (<div>\n                        <div className=\"card-grid\">{statuses}</div>\n                        {this.props.isStarted ? (<div className=\"ui container center aligned page\" style={{marginBottom: '10px'}}>\n                            <div className=\"row\">\n                            <i className=\"large twitter icon\" style={{color: '#1DA1F2'}}></i>\n                            <i className=\"large twitter icon\" style={{color: '#1DA1F2'}}></i>\n                            <i className=\"large twitter icon\" style={{color: '#1DA1F2'}}></i>\n                            </div>\n                        </div>) : <div></div>\n                        }\n                    </div>)}\n            </div>\n        );\n    }\n\n    timeAgo = (date) => {\n        return moment(date).startOf('hour').fromNow();\n    }\n}\n\nexport default ResultSection;","import React from 'react';\nimport './HashTagSection.css';\n\nclass HashTagSection extends React.Component {\n\n    render() {\n\n        const hashTags = this.props.hashTags.map(entry => {\n            return <span><label className='hash-tag' style={{background: '#1DA1F2', color: 'white', padding: '2px'}}>#{entry.text}\n            </label><label className='hash-tag-count' style={{background: '#93A644', color: 'white', padding: '2px'}}> {entry.count}</label> </span>\n        });\n\n\n        return (<div style={{marginTop: '32px'}}>\n                {this.props.hashTags.length > 0 ?\n                    <div className=\"ui segment\">\n                        <span>{hashTags}</span>\n                    </div> : null\n                }\n            </div>\n        );\n    }\n\n}\n\nexport default HashTagSection;","import React from 'react';\nimport axios from 'axios';\nimport Spinner from '../util/Spinner';\nimport ResultSection from './ResultSection';\nimport './Search.css';\nimport Info from '../util/Info';\nimport properties from '../util/properties';\nimport HashTagSection from './HashTagSection';\n\nclass Search extends React.Component {\n\n    state = {term: '', isLoading: false, statusEntries: [], isStarted: false, isError: false, hashTags: []};\n\n    onInputChange = event => {\n        this.setState({term: event.target.value});\n    };\n\n    onFormSubmit = (event) => {\n        event.preventDefault();\n\n        if (this.state.term) {\n            this.setState({isLoading: true});\n\n            axios.get(properties.apiUrl, {\n                params: {\n                    query: encodeURI(this.state.term)\n                }\n            }).then((response) => {\n                const entries = response.data.statusEntries;\n                this.setState({\n                    isLoading: false,\n                    statusEntries: entries,\n                    isStarted: true,\n                    isError: false,\n                    hashTags: response.data.hashTags\n                });\n            }).catch(reason => {\n                console.log(reason);\n                this.setState({isError: true, isLoading: false})\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"ui row\">\n                <div className=\"ui grid\">\n                    <div className=\"column row container search-bar\">\n                        <form className=\"ui form column\" onSubmit={this.onFormSubmit}>\n                            <div className=\"field\">\n                                <div className=\"ui search\">\n                                    <div className=\"ui icon input\">\n                                        <input className=\" prompt\" value={this.state.term} type=\"text\"\n                                               onChange={this.onInputChange}\n                                               placeholder={properties.searchPlaceholder}/>\n                                        <i className=\"search icon\"></i>\n                                    </div>\n                                    <div className=\"results\">No results</div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <HashTagSection hashTags={this.state.hashTags}/>\n                <div style={{marginTop: '10px'}}>{this.state.isLoading ? <Spinner/> :\n                    this.state.isError ? <Info text={properties.backEndError}/> :\n                        !this.state.isStarted ? <Info text={properties.welcome}/> :\n                            <ResultSection statusEntries={this.state.statusEntries}\n                                           isStarted={this.state.isStarted}/>}</div>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport Search from './search/Search';\nimport './App.css';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"ui container\">\n          <Search/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Info during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}